<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 1999-2005 The Apache Software Foundation

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.2//EN" "http://apache.org/forrest/dtd/document-v12.dtd">
<document> 
  <header> 
    <title>WSRP Consumer Architecture</title> 
  </header> 
  <body>
    <p>
    The Producer and Consumer are provided with a very modular
    architecture enabling an easy exchange of module implementations.
    All modules excel by interfaces based on the WSRP object model
    hiding the portal's object model and thus gaining independence of
    changes in the portal implementation or design.
    </p>
    <figure src="../images/WSRPArch4.png" alt="Consumer Architecture"/>
    <section><title>Protocol Handler</title>
      <p>
      The Protocol Handler is a standalone Swing based application that
      implements the consuming portal and the browser functionality. It
      aggregates the integrated WSRP portlets and forwards all
      invocations together with relevant context and request information
      to the remote WSRP service. The SwingConsumer thereby uses the
      ConsumerEnvironment to collect all data required for a WSRP call.
      </p>
    </section>
    <section><title>WSRP Object Model </title>
      <p>
      Most of the WSRP object model is being generated from the WSRP
      specification's WSDL types. 
      </p>
    </section>
    <section><title>PortletDriver </title>
      <p>
      The PortletDriver is the task oriented abstraction of the
      generated WSRP stubs for markup and action invocation.
      </p>
    </section>
    <section><title>WSRP Stubs </title>
      <p>
      The stubs generated by the axis SOAP implementation. The stubs are
      also implementing the cookie handling - for more details see
      SessionHandler below.
      </p>
    </section>
    <section><title>ProducerRegistry </title>
      <p>
      The ProducerRegistry stores and manages details about producer
      portals from which portlets were integrated or shall be
      integrated.
      </p>
    </section>
    <section><title>SessionHandler </title>
      <p>
      The WSRP consumer implementation session handling is based on the
      SOAP stack&apos;s session handling. The generated SOAP stubs are doing
      the cookie handling and are caching the cookies in instance
      variables. This means that one stub object instance is equivalent
      to one HTTP session which we map to one WSRP session (initCookie
      wise). When a WSRP session did time out an InvalidCookie exception
      is being thrown and a new session must be established.
      </p>
    </section>
    <section><title>URLHandler </title>
      <p>
      The URLHandler is responsible for the URL rewriting of the WSRP
      URLs embedded in the markup received from the remote portlet.
      </p>
    </section>
    <section><title>PortletRegistry </title>
      <p>
      The PortletRegistry stores and provides access to WSRP specific
      data and descriptions of a remote Portlet.
      </p>
    </section>
    <section><title>UserRegistry </title>
      <p>
      The UserRegistry is in the Swing consumer case very simplistic. As
      the browser is integrated there is always only one "dummy" user
      being managed.
      </p>
    </section>
  </body>
</document>
