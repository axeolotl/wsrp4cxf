
package oasis.names.tc.wsrp.v1.intf;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import oasis.names.tc.wsrp.v1.wsdl.WSRPService;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebParam.Mode;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.jws.soap.SOAPBinding.ParameterStyle;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.1.1
 * Wed Aug 13 15:22:22 CEST 2008
 * Generated source version: 2.1.1
 * 
 */

public final class WSRPV1MarkupPortType_WSRPBaseService_Client {

    private static final QName SERVICE_NAME = new QName("urn:oasis:names:tc:wsrp:v1:wsdl", "WSRPService");

    private WSRPV1MarkupPortType_WSRPBaseService_Client() {
    }

    public static void main(String args[]) throws Exception {
        URL wsdlURL = WSRPService.WSDL_LOCATION;
        if (args.length > 0) { 
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }
      
        WSRPService ss = new WSRPService(wsdlURL, SERVICE_NAME);
        WSRPV1MarkupPortType port = ss.getWSRPBaseService();  
        
        {
        System.out.println("Invoking releaseSessions...");
        oasis.names.tc.wsrp.v1.types.ReleaseSessions _releaseSessions_releaseSessions = null;
        try {
            oasis.names.tc.wsrp.v1.types.ReturnAny _releaseSessions__return = port.releaseSessions(_releaseSessions_releaseSessions);
            System.out.println("releaseSessions.result=" + _releaseSessions__return);

        } catch (InvalidRegistration e) { 
            System.out.println("Expected exception: InvalidRegistration has occurred.");
            System.out.println(e.toString());
        } catch (MissingParameters e) { 
            System.out.println("Expected exception: MissingParameters has occurred.");
            System.out.println(e.toString());
        } catch (AccessDenied e) { 
            System.out.println("Expected exception: AccessDenied has occurred.");
            System.out.println(e.toString());
        } catch (OperationFailed e) { 
            System.out.println("Expected exception: OperationFailed has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking getMarkup...");
        oasis.names.tc.wsrp.v1.types.GetMarkup _getMarkup_getMarkup = null;
        try {
            oasis.names.tc.wsrp.v1.types.MarkupResponse _getMarkup__return = port.getMarkup(_getMarkup_getMarkup);
            System.out.println("getMarkup.result=" + _getMarkup__return);

        } catch (UnsupportedLocale e) { 
            System.out.println("Expected exception: UnsupportedLocale has occurred.");
            System.out.println(e.toString());
        } catch (InvalidRegistration e) { 
            System.out.println("Expected exception: InvalidRegistration has occurred.");
            System.out.println(e.toString());
        } catch (InvalidUserCategory e) { 
            System.out.println("Expected exception: InvalidUserCategory has occurred.");
            System.out.println(e.toString());
        } catch (UnsupportedMimeType e) { 
            System.out.println("Expected exception: UnsupportedMimeType has occurred.");
            System.out.println(e.toString());
        } catch (MissingParameters e) { 
            System.out.println("Expected exception: MissingParameters has occurred.");
            System.out.println(e.toString());
        } catch (InvalidCookie e) { 
            System.out.println("Expected exception: InvalidCookie has occurred.");
            System.out.println(e.toString());
        } catch (AccessDenied e) { 
            System.out.println("Expected exception: AccessDenied has occurred.");
            System.out.println(e.toString());
        } catch (InvalidHandle e) { 
            System.out.println("Expected exception: InvalidHandle has occurred.");
            System.out.println(e.toString());
        } catch (UnsupportedMode e) { 
            System.out.println("Expected exception: UnsupportedMode has occurred.");
            System.out.println(e.toString());
        } catch (InvalidSession e) { 
            System.out.println("Expected exception: InvalidSession has occurred.");
            System.out.println(e.toString());
        } catch (UnsupportedWindowState e) { 
            System.out.println("Expected exception: UnsupportedWindowState has occurred.");
            System.out.println(e.toString());
        } catch (InconsistentParameters e) { 
            System.out.println("Expected exception: InconsistentParameters has occurred.");
            System.out.println(e.toString());
        } catch (OperationFailed e) { 
            System.out.println("Expected exception: OperationFailed has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking initCookie...");
        oasis.names.tc.wsrp.v1.types.InitCookie _initCookie_initCookie = null;
        try {
            oasis.names.tc.wsrp.v1.types.ReturnAny _initCookie__return = port.initCookie(_initCookie_initCookie);
            System.out.println("initCookie.result=" + _initCookie__return);

        } catch (InvalidRegistration e) { 
            System.out.println("Expected exception: InvalidRegistration has occurred.");
            System.out.println(e.toString());
        } catch (AccessDenied e) { 
            System.out.println("Expected exception: AccessDenied has occurred.");
            System.out.println(e.toString());
        } catch (OperationFailed e) { 
            System.out.println("Expected exception: OperationFailed has occurred.");
            System.out.println(e.toString());
        }
            }
        {
        System.out.println("Invoking performBlockingInteraction...");
        oasis.names.tc.wsrp.v1.types.PerformBlockingInteraction _performBlockingInteraction_performBlockingInteraction = null;
        try {
            oasis.names.tc.wsrp.v1.types.BlockingInteractionResponse _performBlockingInteraction__return = port.performBlockingInteraction(_performBlockingInteraction_performBlockingInteraction);
            System.out.println("performBlockingInteraction.result=" + _performBlockingInteraction__return);

        } catch (UnsupportedLocale e) { 
            System.out.println("Expected exception: UnsupportedLocale has occurred.");
            System.out.println(e.toString());
        } catch (InvalidRegistration e) { 
            System.out.println("Expected exception: InvalidRegistration has occurred.");
            System.out.println(e.toString());
        } catch (InvalidUserCategory e) { 
            System.out.println("Expected exception: InvalidUserCategory has occurred.");
            System.out.println(e.toString());
        } catch (UnsupportedMimeType e) { 
            System.out.println("Expected exception: UnsupportedMimeType has occurred.");
            System.out.println(e.toString());
        } catch (MissingParameters e) { 
            System.out.println("Expected exception: MissingParameters has occurred.");
            System.out.println(e.toString());
        } catch (InvalidCookie e) { 
            System.out.println("Expected exception: InvalidCookie has occurred.");
            System.out.println(e.toString());
        } catch (AccessDenied e) { 
            System.out.println("Expected exception: AccessDenied has occurred.");
            System.out.println(e.toString());
        } catch (InvalidHandle e) { 
            System.out.println("Expected exception: InvalidHandle has occurred.");
            System.out.println(e.toString());
        } catch (UnsupportedMode e) { 
            System.out.println("Expected exception: UnsupportedMode has occurred.");
            System.out.println(e.toString());
        } catch (PortletStateChangeRequired e) { 
            System.out.println("Expected exception: PortletStateChangeRequired has occurred.");
            System.out.println(e.toString());
        } catch (InvalidSession e) { 
            System.out.println("Expected exception: InvalidSession has occurred.");
            System.out.println(e.toString());
        } catch (UnsupportedWindowState e) { 
            System.out.println("Expected exception: UnsupportedWindowState has occurred.");
            System.out.println(e.toString());
        } catch (InconsistentParameters e) { 
            System.out.println("Expected exception: InconsistentParameters has occurred.");
            System.out.println(e.toString());
        } catch (OperationFailed e) { 
            System.out.println("Expected exception: OperationFailed has occurred.");
            System.out.println(e.toString());
        }
            }

        System.exit(0);
    }

}
